// 教育信息
export const projectInfo = {
  project: [
    {
      projectName: 'CAT 组件库',
      jobName: '前端组长',
      startTime: '2023.06',
      endTime: '2024.02',
      question: `市面上并无统一标准的v3开源项目，此时无法参考<br/>
      旧版本的框架太过好用，大多人抗拒使用vue3+ts的开发模式，不好推广<br/>
      公司没有私有组件库，新开发的组件，在各个项目现场的组件不好统一<br/>`,
      hardCore: `市面上并无统一标准的v3开源项目，此时无法参考<br />
      旧版本的框架太过好用，大多人抗拒使用vue3+ts的开发模式，不好推广<br />
      公司没有私有组件库，新开发的组件，在各个项目现场的组件不好统一<br />`,
      solution: `基于vben项目，初步完成了公司的v3脚手架的定型<br/>
      建立前端私有业务组件库，统一公司的新项目的业务组件<br/>
      未能解决新版在各个项目现场的推广（因为旧版太好用）<br/>`,
      result: `建立的前端的npm私有库，统一了各个项目现场的发布<br/>
      将工具方法转移到私有库中，避免工具方法包外泄<br/>
      在这个过程中再次规范了代码检测，提交检测等流程，并建立了相关的使用文档（放在了公司内部的文档库）<br/>`,
    },
    {
      projectName: '数据大屏编辑器',
      jobName: '前端组长',
      startTime: '2023.03',
      endTime: '2024.06',
      question: `因各个项目现场都有大屏需求，且大屏需求特别多改动频繁，占用了太多开发人员的完成时间，于是要求一个编辑器，由运维人员
自行拖拽，实现一些简单的数据大屏效果。`,
      hardCore: `拖拽的排版难处理,市面上的开源方案都是半成品，需要自己手动完善<br />
      没有什么统一的UI方案，只能靠着自己的感觉来提供几套固定的排版（不过够用了）<br />`,
      solution: `基于已有的拖拽控件进行改造，结合DATAV与echarts，配合后端存储json，完成平台的搭建，形成初版本。`,
      result: `1.基于DataV+Echarts，完成了数据大屏的编辑器的实现，通过简单的拖拽可以完成页面的编辑<br/>
      2.简单大屏可以由项目现场自行拖拽完成，且后续维护由运维人员自行完成<br/>
      3.大量缩短了各个项目现场大屏变动对前端开发组的干扰，使前端人员能更专注于维护组件库的内容。<br/>`,
    },
    {
      projectName: '流程图+低代码平台',
      jobName: '前端产品负责人',
      startTime: '2022.07',
      endTime: '2023.03',
      question: `基于公司现有框架，开发一套可供项目现场的实施人员快迭代的低代码平台，能够完成流程表单的生成（PC+小程序双端代码皆
      有）。<br />
      同时，流程表单能够在双端内完成审批，并在PC端附带流程展示（bpmn.js）<br />
      接受各个项目现场的响应，持续优化迭代当前项目内的业务组件，优化流程图相关的使用体验。<br />`,
      hardCore: `之前公司无人做过相关流程，我负责技术选型，在阿里开源的G6和bpmn.JS中，最终选用了bpmn，因为阿里的开源项目总会
      做不可控的升级<br />
      表单和流程双端生成，模板控制需要大量的对已有组件库的封装和优化<br />
      需要顾及项目现场实施人员的使用体验，持续优化相关的使用体验，尽可能的减少操作难度<br />`,
      solution: `基于ruoyi版本大改了低代码的配置功能，同时配合后端，完成全流程的表单配置，实现表单在流程中的权限管理功能。`,
      result: `1.统一各个项目现场的业务组件<br />
      2. 基于统一的样式，整理了一套低代码的模板代码<br />
      3. 实现了小程序部分的低代码模板<br />
      4. 基于 bpmn 开发了流程图模板，配合后端解决了公司流程审批无图形化的问题<br />
      5. 基于流程图，完成了小程序端+PC 端的流程审批类低代码生成<br />
      6. 建立前端工具类方法，并发布至npm，使各个项目现场可以统一使用<br />
      收拢各个项目现场的实施人员，初步完成前端开发的培训后，实施人员几乎可以独立完成客户现场的简单需求。<br />
      目前已经支持上海张江，蜀山高科，苏州高铁新城，苏州浒墅关等多个项目现场，大部分非自定义需求全部由实施人员完成。<br />
      UI基础组件标准化，技术栈在此时固化为Vue2，至此完成产品化的第五版本的终结。<br />`,
    },
    {
      projectName: '招商CRM产品化（小程序）',
      jobName: '前端项目负责人',
      startTime: '2021.06',
      endTime: '2022.06',
      question: `三个月内重构资产管理配套的移动端（CRM招商）H5前端业务（只算是附带，在此期间资产管理系统PC端的优化并未停止，且前
      端只有我一人负责）。<br />
      重构MP-Vue的小程序端，并在此基础上微信小程序端。<br />`,
      hardCore: `旧版H5移动端的UI框架已经被废弃，导致前端极难维护，同时短期内需要出成果。<br />
      旧版小程序框架也已被废弃，前端几乎无法维护，同时短期内也要出成果。<br />
      完成H5版本后要求后续可迭代和升级，并开发小程序版本。<br />`,
      solution: `1. 完成技术选型，从当时市面上的5种 Ui 框架中，确定了 vantUI ，然后重写了移动端H5<br />
      2. 将部分小程序源码 vue化，将原本使用 mp-vue 的小程序，转型为 uni-app ，重新选定 uView 完成前端的开发<br />
      3. 配合后端，重新设计了登录逻辑，完成小程序的常态化登录（免登）<br />
      4. 将招商相关的业务梳理后，定制了大部分业务组件，完成了产品化<br />
      5. 教会后端使用uni-app，在完成基础组件之后，让后端协助完成大部分简单增删改查业务的书写前端框架交互设计响应式基础扎
      实<br />`,
      result: `1.技术选型及代码重构，比原定三个月的计划时间节省了约一个月，同时项目变得可维护<br />
      2.小程序代码重构，节省了半个月左右的开发进度，进度可量化<br />
      3.小程序常态化登录，为公司之后的小程序开发设计了免登模板，确立了第一个版本的移动端脚手架<br />
      4.业务组件的封装，让各个项目现场可以直接使用业务组件进行二次开发，节省了各个项目现场自行封装的时间<br />
      5.统一技术栈，确立公司vue全家桶的地位，缩减了人员的培训成本，简单的业务不需要额外学习其他开发技术，同时教会了后端<br />
      简单的使用Vue进行起前端开发业务，暂时缓解了前端开发人力短缺的问题<br />`,
    },
    {
      projectName: '资产管理系统V4.0（PC产品化）',
      jobName: '前端开发工程师',
      startTime: '2019.09',
      endTime: '2021.01',
      question: `张江资产管理系统旧版的翻新，同时在此基础上完成PC版本的产品化，兼容多个项目现场
      重构MP-Vue的小程序端，并在此基础上微信小程序端。<br />`,
      hardCore: `1. 多项目现场需求不同，产品化之后需要兼容多个项目现场<br />
      2. 多人同时协作开发，对接流程混乱，极大拖延开发进度。<br />
      3. 开发无规范，代码无规范格式，同事的组件未封装造成多处重复书写相同业务，排查困难。<br />
      4. 前端人数极少，后端不懂前端强行插入开发，导致代码极难维护。<br />
      5. 权限管理全靠用户名，无统一的权限管理方案<br />
      6. 代码打包版本混乱，且打包体积过大，速度过慢<br />`,
      solution: `1. 协助各个项目现场的业务模块梳理，完成前端的业务整合及开发<br />
      2. 样式抽离统一，业务统一<br />
      3. 路由动态化，封装自定义权限指令，各个项目现场可以按照权限配置到按钮<br />
      4. 打包配置抽离，无须重复打包，解决各个项目现场需要大量时间打包的问题<br />
      5. 梳理业务，和项目经理制定了产品规范，按照业务统一封装大部分业务组件，完成产品化之后，供各个项目现场使用<br />
      6. 升级 webpack ，从webpack3升级到4，将打包速度提速一倍<br />
      7. 优化项目中的无效代码及图片，减少了项目一半以上的打包体积<br />
      8.写入webpack打包插件，将打包更新的文件按照版本划分，避免了nginx的缓存问题，同时也解决了发布者无法在线回滚版本的
      问题前端性能优化前端框架<br />`,
      result: `1. 正式确认公司的前端负责人的身份，为公司前端技术托底<br />
      2. 作为前端负责人，协助完成了各个项目现场的业务组件的封装，完成了公司内的第一版本统一业务组件库的封装（PC和移动端
      各一套）<br />
      3. 确定了人过留档的规则，保证团队内的核心业务组件都要在组件内打上对应的标记，并形成了公司第一版本的发布文档库（语
      雀）<br />
      4. 配合后端，完成了整个资产管理系统的业务整合，完成了精确到按钮的权限管理，将各个项目现场的业务完成了统一，实现了
      产品化<br />
      5. 基于ruoyi的前端，改版形成了自己的前端脚手架。<br />
      6. 统一代码格式化规则，建立了最初的提交检测功能<br />
      7. 解决了各个项目现场部署发布慢，时间久，发布包特别大的问题<br />
      8. 解决了版本发布错误无法回滚的问题<br />
      通过以上方式，大幅减少了前端开发消耗的时间和人力，让原本近乎不可能推进的开发进度变得可以量化和维护。<br />
      将原本数月无法推进的前端开发业务在四个月内完成最初版，同时后续可以持续迭代优化。<br />
      教会了公司后端部分简单的前端开发，使他们也能简单的进行前端业务的处理，暂时解决了前端有限的人力资源不足的问题<br />`,
    },
  ],
}
